openapi: 3.0.0
info:
  title: Renata
  version: 1.0.0
servers:
- url: 'http://localhost:3000'
- url: 'http://34.128.101.7'
- url: 'http://renata-app.xyz'
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
security:
- bearerAuth: []
tags:
- name: Auth
- name: Profile
paths:
  /api/register:
    post:
      tags:
      - Auth
      summary: Register
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                email: dedensetyawan17@gmail.com
                password: Deden171201.!
                confirmPassword: Deden171201.!
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/verify:
    post:
      tags:
      - Auth
      summary: Verify Email
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                id: 8JEP0CYuMq
                otp: 3029
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/resend-verification:
    post:
      tags:
      - Auth
      summary: Resend OTP
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                id: ShKjkGyBoF
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/login:
    post:
      tags:
      - Auth
      summary: Login
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                email: dedensetyawan17@gmail.com
                password: DedenSetyawan17.!
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/forgot-password:
    post:
      tags:
      - Auth
      summary: Forgot Password
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                email: dedensetyawan17@gmail.com
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/verify-reset-password:
    post:
      tags:
      - Auth
      summary: Verify Reset Password
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                email: dedensetyawan17@gmail.com
                otp: 8204
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/reset-password:
    put:
      tags:
      - Auth
      summary: Reset Password
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                email: dedensetyawan17@gmail.com
                password: DedenSetyawan17.!
                confirmPassword: DedenSetyawan17.!
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/profile:
    get:
      tags:
      - Profile
      summary: Get Profile
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    post:
      tags:
      - Profile
      summary: Update Profile
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                first_name: Nanda
                last_name: Darmawan
                phone: '62132341351233'
                address: 'Denpasar, Bali'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/profile-image:
    post:
      tags:
      - Profile
      summary: Upload Profile Picture
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        '200':
          description: OK
          headers:
            X-Powered-By:
              schema:
                type: string
                example: Express
            Content-Type:
              schema:
                type: string
                example: application/json; charset=utf-8
            Content-Length:
              schema:
                type: integer
                example: '165'
            ETag:
              schema:
                type: string
                example: W/"a5-ECqs5HMCwRqBqozHc8vUQp92G10"
            Date:
              schema:
                type: string
                example: 'Thu, 11 May 2023 02:28:18 GMT'
            Connection:
              schema:
                type: string
                example: keep-alive
            Keep-Alive:
              schema:
                type: string
                example: timeout=5
          content:
            application/json:
              schema:
                type: object
              example:
                status: 200
                message: Upload success
                success: true
                data:
                  url: 'https://storage.googleapis.com/profile-image-bucket-dev/1683772096920-HMM1vWYYH6CSzw3v.jpeg'
        '400':
          description: Bad Request
          headers:
            X-Powered-By:
              schema:
                type: string
                example: Express
            Content-Type:
              schema:
                type: string
                example: application/json; charset=utf-8
            Content-Length:
              schema:
                type: integer
                example: '87'
            ETag:
              schema:
                type: string
                example: W/"57-67j2X3Ie5R/DfRXvI1eG/AW4qdw"
            Date:
              schema:
                type: string
                example: 'Thu, 11 May 2023 02:19:58 GMT'
            Connection:
              schema:
                type: string
                example: keep-alive
            Keep-Alive:
              schema:
                type: string
                example: timeout=5
          content:
            application/json:
              schema:
                type: object
              example:
                status: 400
                message: 'Only support file png, jpeg, jpg'
                success: false
                data: null
